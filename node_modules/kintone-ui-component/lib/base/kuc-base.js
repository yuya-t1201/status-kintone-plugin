import { LitElement } from "lit";
import { v4 as uuid } from "uuid";
export class KucBase extends LitElement {
    createRenderRoot() {
        return this;
    }
    async throwErrorAfterUpdateComplete(message) {
        await this.updateComplete;
        throw new Error(message);
    }
}
/**
 * Common function to dispatch custom event.
 * This is used in all components.
 * @param el        Event target, the type is HTMLElement
 * @param eventName Event name, the type is string
 * @param detail    The detail property of event, the type declaration means any object
 */
export const dispatchCustomEvent = (el, eventName, detail) => {
    const event = new CustomEvent(eventName, {
        detail,
        bubbles: true,
        composed: true,
    });
    return el.dispatchEvent(event);
};
export const createStyleOnHeader = (styleText) => {
    const kucStyleTagId = "kuc-style-1-17-0";
    let kucStyleTag = document.getElementById(kucStyleTagId);
    if (!kucStyleTag) {
        kucStyleTag = document.createElement("style");
        kucStyleTag.id = kucStyleTagId;
        document.head.appendChild(kucStyleTag);
    }
    kucStyleTag.appendChild(document.createTextNode(styleText));
};
export const generateGUID = () => uuid();
