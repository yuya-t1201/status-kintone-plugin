var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html, svg } from "lit";
import { property, query, queryAll, state } from "lit/decorators.js";
import { ERROR_MESSAGE } from "../base/constant";
import { visiblePropConverter } from "../base/converter";
import { createStyleOnHeader, dispatchCustomEvent, generateGUID, KucBase, } from "../base/kuc-base";
import { validateArrayType, validateDuplicatedValues, validateProps, validateValueString, } from "../base/validator";
import { COMBOBOX_CSS } from "./style";
import "../base/label";
import "../base/error";
let exportCombobox;
(() => {
    exportCombobox = window.customElements.get("kuc-combobox-1-17-0");
    if (exportCombobox) {
        return;
    }
    class KucCombobox extends KucBase {
        constructor(props) {
            super();
            this.className = "";
            this.error = "";
            this.id = "";
            this.label = "";
            this.value = "";
            this.disabled = false;
            this.requiredIcon = false;
            this.visible = true;
            this.items = [];
            this._selectorVisible = false;
            this._searchText = "";
            this._DISABLED_CLASS = "kuc-combobox-1-17-0__group__select-menu__item--disabled";
            this._query = "";
            this._matchingItems = [];
            this._GUID = generateGUID();
            const validProps = validateProps(props);
            this._handleClickDocument = this._handleClickDocument.bind(this);
            Object.assign(this, validProps);
        }
        shouldUpdate(changedProperties) {
            if (changedProperties.has("items")) {
                if (!validateArrayType(this.items)) {
                    this.throwErrorAfterUpdateComplete(ERROR_MESSAGE.ITEMS.IS_NOT_ARRAY);
                    return false;
                }
                const itemsValues = this.items.map((item) => item.value);
                if (!validateDuplicatedValues(itemsValues)) {
                    this.throwErrorAfterUpdateComplete(ERROR_MESSAGE.ITEMS.IS_DUPLICATED);
                    return false;
                }
            }
            if (changedProperties.has("value") && !validateValueString(this.value)) {
                this.throwErrorAfterUpdateComplete(ERROR_MESSAGE.VALUE.IS_NOT_STRING);
                return false;
            }
            return true;
        }
        willUpdate(changedProperties) {
            if (changedProperties.has("value")) {
                this._searchText = this._getSelectedLabel() || "";
            }
        }
        render() {
            return html `
        <div class="kuc-combobox-1-17-0__group">
          <div
            class="kuc-combobox-1-17-0__group__label"
            id="${this._GUID}-label"
            ?hidden="${!this.label}"
          >
            <kuc-base-label-1-17-0
              .text="${this.label}"
              .requiredIcon="${this.requiredIcon}"
            ></kuc-base-label-1-17-0>
          </div>
          <div class="kuc-combobox-1-17-0__group__toggle">
            <input
              class="kuc-combobox-1-17-0__group__toggle__input"
              role="combobox"
              type="text"
              .value="${this._searchText}"
              aria-haspopup="listbox"
              aria-autocomplete="list"
              aria-labelledby="${this._GUID}-label"
              aria-controls="${this._GUID}-listbox"
              aria-describedby="${this._GUID}-error"
              aria-expanded="${this._selectorVisible}"
              aria-required="${this.requiredIcon}"
              ?disabled="${this.disabled}"
              @change="${this._handleChangeComboboxInput}"
              @input="${this._handleInputComboboxInput}"
              @keydown="${this._handleKeyDownComboboxInput}"
              @click="${this._handleClickComboboxInput}"
              @blur="${this._handleBlurComboboxInput}"
            />
            <div class="kuc-combobox-1-17-0__group__toggle__icon">
              <button
                class="kuc-combobox-1-17-0__group__toggle__icon__button"
                tabindex="-1"
                type="button"
                aria-labelledby="${this._GUID}-label"
                aria-controls="${this._GUID}-listbox"
                aria-expanded="${this._selectorVisible}"
                ?disabled="${this.disabled}"
                @click="${this._handleClickToggleButton}"
              >
                ${this._getToggleIconSvgTemplate()}
              </button>
            </div>
          </div>
          <ul
            class="kuc-combobox-1-17-0__group__select-menu"
            role="listbox"
            id="${this._GUID}-listbox"
            aria-labelledby="${this._GUID}-label"
            aria-hidden="${!this._selectorVisible}"
            ?hidden="${!this._selectorVisible}"
            @mouseleave="${this._handleMouseLeaveMenu}"
            @mousedown="${this._handleMouseDownMenu}"
          >
            ${this._matchingItems.map((item, number) => this._getItemTemplate(item, number))}
          </ul>
          <kuc-base-error-1-17-0
            .text="${this.error}"
            .guid="${this._GUID}"
            ?hidden="${!this.error}"
            ariaLive="assertive"
          ></kuc-base-error-1-17-0>
        </div>
      `;
        }
        firstUpdated() {
            window.addEventListener("resize", () => {
                this._actionResizeScrollWindow();
            });
            window.addEventListener("scroll", () => {
                this._actionResizeScrollWindow();
            });
        }
        async updated(changedProperties) {
            super.updated(changedProperties);
            await this.updateComplete;
            if (this._selectorVisible) {
                this._setMenuPosition();
                this._scrollToView();
                if (this._selectedItemEl === null ||
                    this._selectedItemEl.classList.contains(this._DISABLED_CLASS)) {
                    this._actionClearAllHighlightMenuItem();
                }
                else {
                    this._setHighlightAndActiveDescendantMenu(this._selectedItemEl);
                }
                setTimeout(() => {
                    document.addEventListener("click", this._handleClickDocument, true);
                }, 1);
            }
            else {
                setTimeout(() => {
                    document.removeEventListener("click", this._handleClickDocument, true);
                }, 1);
            }
        }
        _getToggleIconSvgTemplate() {
            return svg `
      <svg
        width="36"
        height="36"
        viewBox="0 0 36 36"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          fill-rule="evenodd"
          clip-rule="evenodd"
          d="M24.2122 15.6665L25 16.1392L19.7332 21.4998H18.2668L13 16.1392L13.7878 15.6665L18.765 20.6866H19.235L24.2122 15.6665Z"
          fill="#3498db"/>
      </svg>
    `;
        }
        _getItemTemplate(item, index) {
            const isCheckedItem = this._isCheckedItem(item);
            const isDisabled = item.disabled;
            const text = item.label === undefined ? item.value : item.label;
            let newText = isCheckedItem ? html `<b>${text}</b>` : html `${text}`;
            const trimmedQuery = this._query.trim().toLowerCase();
            if (trimmedQuery && text) {
                const startIndex = text.toLowerCase().indexOf(trimmedQuery);
                const endIndex = startIndex + trimmedQuery.length;
                newText = html `
          ${text.slice(0, startIndex)}<b>${text.slice(startIndex, endIndex)}</b>${text.slice(endIndex)}
        `;
            }
            return html `
        <li
          class="kuc-combobox-1-17-0__group__select-menu__item ${isDisabled
                ? this._DISABLED_CLASS
                : ""}"
          role="option"
          aria-selected="${isCheckedItem ? "true" : "false"}"
          value="${item.value !== undefined ? item.value : ""}"
          id="${this._GUID}-menuitem-${index}"
          @mousedown="${!isDisabled ? this._handleMouseDownComboboxItem : null}"
          @mouseover="${!isDisabled ? this._handleMouseOverComboboxItem : null}"
        >
          ${this._getComboboxIconSvgTemplate(isCheckedItem, isDisabled)}
          ${newText}
        </li>
      `;
        }
        _getComboboxIconSvgTemplate(checked, disabled) {
            return svg `
      ${checked
                ? svg `<svg
          class="kuc-combobox-1-17-0__group__select-menu__item__icon"
          width="11"
          height="9"
          viewBox="0 0 11 9"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M0 5L1.5 3L4.5 5.5L9.5 0L11 1.5L4.5 8.5L0 5Z"
            fill="${disabled ? "#888888" : "#3498db"}"/>
        </svg>`
                : ""}`;
        }
        _handleMouseDownComboboxItem(event) {
            const itemEl = this._getItemElementWhenMouseOverDown(event.target);
            const value = itemEl.getAttribute("value");
            this._actionUpdateValue(value);
        }
        _handleMouseOverComboboxItem(event) {
            const itemEl = this._getItemElementWhenMouseOverDown(event.target);
            this._actionHighlightMenuItem(itemEl);
        }
        _handleMouseLeaveMenu() {
            this._actionClearAllHighlightMenuItem();
        }
        _handleMouseDownMenu(event) {
            event.preventDefault();
        }
        _handleClickToggleButton(event) {
            event.preventDefault();
            this._inputEl.focus();
            this._inputEl.select();
            this._resetToggleInputValue();
            this._actionToggleMenu();
        }
        _handleInputComboboxInput(event) {
            event.stopPropagation();
            this._searchText = this._inputEl.value;
            this._query = this._inputEl.value;
            this._setMatchingItems();
        }
        _handleClickComboboxInput(event) {
            event.stopPropagation();
            this._inputEl.select();
            this._setMatchingItems();
        }
        _handleChangeComboboxInput(event) {
            event.stopPropagation();
        }
        _handleBlurComboboxInput(event) {
            this._resetToggleInputValue();
        }
        _handleClickDocument(event) {
            if (event.target === this._toggleEl ||
                this._toggleEl.contains(event.target)) {
                this._inputEl.focus();
                event.stopPropagation();
            }
            if (Array.from(this._disabledItemsEl).some((disabledItemEl) => disabledItemEl === event.target ||
                disabledItemEl.contains(event.target))) {
                return;
            }
            this._actionHideMenu();
        }
        _handleKeyDownComboboxInput(event) {
            switch (event.key) {
                case "Up": // IE/Edge specific value
                case "ArrowUp": {
                    event.preventDefault();
                    if (!this._selectorVisible) {
                        this._actionShowMenu();
                        break;
                    }
                    this._actionHighlightPrevMenuItem();
                    break;
                }
                case "Tab":
                    if (this._selectorVisible) {
                        this._actionHideMenu();
                    }
                    break;
                case "Down": // IE/Edge specific value
                case "ArrowDown": {
                    event.preventDefault();
                    if (!this._selectorVisible) {
                        this._actionShowMenu();
                        break;
                    }
                    this._actionHighlightNextMenuItem();
                    break;
                }
                case "Enter": {
                    event.preventDefault();
                    const itemEl = this._highlightItemEl;
                    if (itemEl === null)
                        break;
                    const value = itemEl.getAttribute("value");
                    this._actionUpdateValue(value);
                    this._actionHideMenu();
                    break;
                }
                case "Escape": {
                    event.preventDefault();
                    if (this._selectorVisible) {
                        event.stopPropagation();
                    }
                    this._resetToggleInputValue();
                    this._actionHideMenu();
                    break;
                }
                case "Home": {
                    if (this._selectorVisible) {
                        event.preventDefault();
                        this._actionHighlightFirstMenuItem();
                    }
                    break;
                }
                case "End": {
                    if (this._selectorVisible) {
                        event.preventDefault();
                        this._actionHighlightLastMenuItem();
                    }
                    break;
                }
                default:
                    break;
            }
        }
        _getSelectedLabel() {
            const items = this.items.filter((item, index) => this._isCheckedItem(item));
            if (items.length === 0)
                return "";
            return items[0].label === undefined ? items[0].value : items[0].label;
        }
        _actionShowMenu() {
            if (this._query.trim() === "") {
                this._matchingItems = this.items;
            }
            if (this.items.length === 0 || this._matchingItems.length === 0) {
                return;
            }
            this._inputEl.focus();
            this._selectorVisible = true;
        }
        _actionHideMenu() {
            this._selectorVisible = false;
            this._actionRemoveActiveDescendant();
        }
        _actionToggleMenu() {
            if (this._selectorVisible) {
                this._actionHideMenu();
                return;
            }
            this._actionShowMenu();
        }
        _actionHighlightFirstMenuItem() {
            let firstItem = this._firstItemEl;
            let itemIsDisabled = false;
            for (let i = 0; i < this._matchingItems.length; i++) {
                itemIsDisabled = firstItem.classList.contains(this._DISABLED_CLASS);
                if (itemIsDisabled) {
                    firstItem = firstItem.nextElementSibling;
                }
                else {
                    break;
                }
            }
            !itemIsDisabled && this._setHighlightAndActiveDescendantMenu(firstItem);
        }
        _actionHighlightLastMenuItem() {
            let lastItem = this._lastItemEl;
            let itemIsDisabled = false;
            for (let i = 0; i < this._matchingItems.length; i++) {
                itemIsDisabled = lastItem.classList.contains(this._DISABLED_CLASS);
                if (itemIsDisabled) {
                    lastItem = lastItem.previousElementSibling;
                }
                else {
                    break;
                }
            }
            !itemIsDisabled && this._setHighlightAndActiveDescendantMenu(lastItem);
        }
        _actionHighlightPrevMenuItem() {
            let prevItem = null;
            if (this._highlightItemEl !== null) {
                prevItem = this._highlightItemEl
                    .previousElementSibling;
            }
            if (prevItem === null) {
                prevItem = this._lastItemEl;
            }
            let prevItemIsDisabled = false;
            for (let i = 0; i < this._matchingItems.length; i++) {
                prevItemIsDisabled = prevItem.classList.contains(this._DISABLED_CLASS);
                if (prevItemIsDisabled) {
                    prevItem = prevItem.previousElementSibling;
                    if (prevItem === null) {
                        prevItem = this._lastItemEl;
                    }
                }
                else {
                    break;
                }
            }
            !prevItemIsDisabled &&
                this._setHighlightAndActiveDescendantMenu(prevItem);
        }
        _actionHighlightNextMenuItem() {
            let nextItem = null;
            if (this._highlightItemEl !== null) {
                nextItem = this._highlightItemEl.nextElementSibling;
            }
            if (nextItem === null) {
                nextItem = this._firstItemEl;
            }
            let nextItemIsDisabled = false;
            for (let i = 0; i < this._matchingItems.length; i++) {
                nextItemIsDisabled = nextItem.classList.contains(this._DISABLED_CLASS);
                if (nextItemIsDisabled) {
                    nextItem = nextItem.nextElementSibling;
                    if (nextItem === null) {
                        nextItem = this._firstItemEl;
                    }
                }
                else {
                    break;
                }
            }
            !nextItemIsDisabled &&
                this._setHighlightAndActiveDescendantMenu(nextItem);
        }
        _actionClearAllHighlightMenuItem() {
            this._itemsEl.forEach((itemEl) => {
                itemEl.classList.remove("kuc-combobox-1-17-0__group__select-menu__highlight");
            });
            this._actionRemoveActiveDescendant();
        }
        _setHighlightAndActiveDescendantMenu(selectedItemEl) {
            this._actionHighlightMenuItem(selectedItemEl);
            this._actionSetActiveDescendant(selectedItemEl.id);
            this._scrollToView();
        }
        _actionHighlightMenuItem(item) {
            this._actionClearAllHighlightMenuItem();
            item.classList.add("kuc-combobox-1-17-0__group__select-menu__highlight");
        }
        _actionUpdateValue(value) {
            if (this.value === value) {
                this._resetToggleInputValue();
                return;
            }
            const detail = {
                oldValue: this.value,
                value: value,
            };
            this.value = value;
            this._query = "";
            dispatchCustomEvent(this, "change", detail);
        }
        _actionSetActiveDescendant(value) {
            if (value !== undefined && this._inputEl !== null) {
                this._inputEl.setAttribute("aria-activedescendant", value);
            }
        }
        _actionRemoveActiveDescendant() {
            this._inputEl.removeAttribute("aria-activedescendant");
        }
        _setMatchingItems() {
            const matchingItems = this.items.filter((item) => {
                const escapePattern = (string) => {
                    return string.replace(/[.*+?^=!:${}()|[\]/\\]/g, "\\$&");
                };
                const regex = new RegExp(escapePattern(this._query.trim()), "gi");
                if (item.label)
                    return regex.test(item.label);
                if (item.value)
                    return regex.test(item.value);
                return false;
            });
            if (matchingItems.length === 0) {
                this._matchingItems = [];
                this._actionHideMenu();
            }
            else {
                this._matchingItems = matchingItems;
                this._actionShowMenu();
            }
        }
        _getScrollbarWidthHeight() {
            const scrollDiv = document.createElement("div");
            scrollDiv.style.cssText =
                "overflow: scroll; position: absolute; top: -9999px;";
            document.body.appendChild(scrollDiv);
            const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
            const scrollbarHeight = scrollDiv.offsetHeight - scrollDiv.clientHeight;
            document.body.removeChild(scrollDiv);
            return { scrollbarWidth, scrollbarHeight };
        }
        _getDistanceToggleButton() {
            const { scrollbarWidth, scrollbarHeight } = this._getScrollbarWidthHeight();
            const isWindowRightScrollbarShow = document.body.scrollHeight > window.innerHeight;
            const isWindowBottomScrollbarShow = document.body.scrollWidth > window.innerWidth;
            const toTop = this._toggleEl.getBoundingClientRect().top;
            const toBottom = window.innerHeight -
                this._toggleEl.getBoundingClientRect().bottom -
                (isWindowBottomScrollbarShow ? scrollbarHeight : 0);
            const toLeft = this._toggleEl.getBoundingClientRect().left;
            const toRight = window.innerWidth -
                this._toggleEl.getBoundingClientRect().left -
                (isWindowRightScrollbarShow ? scrollbarWidth : 0);
            return { toTop, toBottom, toLeft, toRight };
        }
        _setMenuPositionAboveOrBelow() {
            this._menuEl.style.height = "auto";
            this._menuEl.style.bottom = "auto";
            this._menuEl.style.overflowY = "";
            const ERROR_MARGIN = 16;
            const menuHeight = this._menuEl.getBoundingClientRect().height;
            const distanceToggleButton = this._getDistanceToggleButton();
            if (distanceToggleButton.toBottom >= menuHeight)
                return;
            if (distanceToggleButton.toBottom < distanceToggleButton.toTop) {
                // Above
                const errorHeight = this._errorEl.offsetHeight
                    ? this._errorEl.offsetHeight + ERROR_MARGIN
                    : 0;
                this._menuEl.style.bottom = `${this._toggleEl.offsetHeight + errorHeight}px`;
                if (distanceToggleButton.toTop >= menuHeight)
                    return;
                this._menuEl.style.height = `${distanceToggleButton.toTop}px`;
                this._menuEl.style.overflowY = "scroll";
            }
            else {
                // Below
                this._menuEl.style.height = `${distanceToggleButton.toBottom}px`;
                this._menuEl.style.overflowY = "scroll";
            }
        }
        _setMenuPositionLeftOrRight() {
            this._menuEl.style.right = "auto";
            const menuWidth = this._menuEl.getBoundingClientRect().width;
            const distanceToggleButton = this._getDistanceToggleButton();
            if (
            // Right
            distanceToggleButton.toRight >= menuWidth ||
                distanceToggleButton.toLeft < menuWidth ||
                distanceToggleButton.toRight < 0)
                return;
            // Left
            const right = this._toggleEl.offsetWidth - distanceToggleButton.toRight;
            this._menuEl.style.right = right > 0 ? `${right}px` : "0px";
        }
        _setMenuPosition() {
            this._setMenuPositionAboveOrBelow();
            this._setMenuPositionLeftOrRight();
        }
        _scrollToView() {
            if (!this._highlightItemEl || !this._menuEl)
                return;
            const menuElClientRect = this._menuEl.getBoundingClientRect();
            const highlightItemClientRect = this._highlightItemEl.getBoundingClientRect();
            if (highlightItemClientRect.top < menuElClientRect.top) {
                this._menuEl.scrollTop -=
                    menuElClientRect.top - highlightItemClientRect.top;
            }
            if (menuElClientRect.bottom < highlightItemClientRect.bottom) {
                this._menuEl.scrollTop +=
                    highlightItemClientRect.bottom - menuElClientRect.bottom;
            }
        }
        _actionResizeScrollWindow() {
            if (this._timeoutID || !this._selectorVisible)
                return;
            this._timeoutID = window.setTimeout(() => {
                this._timeoutID = null;
                this._setMenuPosition();
            }, 50);
        }
        _isCheckedItem(item) {
            return item.value === this.value;
        }
        _resetToggleInputValue() {
            const selectedLabel = this._getSelectedLabel();
            if (this._searchText !== selectedLabel) {
                this._searchText = selectedLabel ? selectedLabel : "";
            }
            this._query = "";
        }
        _getItemElementWhenMouseOverDown(eventTarget) {
            if (eventTarget.classList.value
                .split(" ")
                .includes("kuc-combobox-1-17-0__group__select-menu__item")) {
                return eventTarget;
            }
            return this._getItemElementWhenMouseOverDown(eventTarget.parentElement);
        }
    }
    __decorate([
        property({ type: String, reflect: true, attribute: "class" })
    ], KucCombobox.prototype, "className", void 0);
    __decorate([
        property({ type: String })
    ], KucCombobox.prototype, "error", void 0);
    __decorate([
        property({ type: String, reflect: true, attribute: "id" })
    ], KucCombobox.prototype, "id", void 0);
    __decorate([
        property({ type: String })
    ], KucCombobox.prototype, "label", void 0);
    __decorate([
        property({ type: String })
    ], KucCombobox.prototype, "value", void 0);
    __decorate([
        property({ type: Boolean })
    ], KucCombobox.prototype, "disabled", void 0);
    __decorate([
        property({ type: Boolean })
    ], KucCombobox.prototype, "requiredIcon", void 0);
    __decorate([
        property({
            type: Boolean,
            attribute: "hidden",
            reflect: true,
            converter: visiblePropConverter,
        })
    ], KucCombobox.prototype, "visible", void 0);
    __decorate([
        property({ type: Array })
    ], KucCombobox.prototype, "items", void 0);
    __decorate([
        state()
    ], KucCombobox.prototype, "_selectorVisible", void 0);
    __decorate([
        query(".kuc-combobox-1-17-0__group__toggle")
    ], KucCombobox.prototype, "_toggleEl", void 0);
    __decorate([
        query(".kuc-combobox-1-17-0__group__toggle__input")
    ], KucCombobox.prototype, "_inputEl", void 0);
    __decorate([
        query(".kuc-combobox-1-17-0__group__select-menu")
    ], KucCombobox.prototype, "_menuEl", void 0);
    __decorate([
        queryAll(".kuc-combobox-1-17-0__group__select-menu__item")
    ], KucCombobox.prototype, "_itemsEl", void 0);
    __decorate([
        query(".kuc-combobox-1-17-0__group__select-menu__item")
    ], KucCombobox.prototype, "_firstItemEl", void 0);
    __decorate([
        query(".kuc-combobox-1-17-0__group__select-menu__item:last-child")
    ], KucCombobox.prototype, "_lastItemEl", void 0);
    __decorate([
        query(".kuc-combobox-1-17-0__group__select-menu__item[aria-selected=true]")
    ], KucCombobox.prototype, "_selectedItemEl", void 0);
    __decorate([
        query(".kuc-combobox-1-17-0__group__select-menu__highlight")
    ], KucCombobox.prototype, "_highlightItemEl", void 0);
    __decorate([
        query(".kuc-base-error-1-17-0__error")
    ], KucCombobox.prototype, "_errorEl", void 0);
    __decorate([
        queryAll(".kuc-combobox-1-17-0__group__select-menu__item--disabled")
    ], KucCombobox.prototype, "_disabledItemsEl", void 0);
    __decorate([
        state()
    ], KucCombobox.prototype, "_searchText", void 0);
    window.customElements.define("kuc-combobox-1-17-0", KucCombobox);
    createStyleOnHeader(COMBOBOX_CSS);
    exportCombobox = KucCombobox;
})();
const Combobox = exportCombobox;
export { Combobox };
