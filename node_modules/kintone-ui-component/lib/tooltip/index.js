var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html } from "lit";
import { property, query, queryAll } from "lit/decorators.js";
import { unsafeHTMLConverter } from "../base/converter";
import { createStyleOnHeader, generateGUID, KucBase } from "../base/kuc-base";
import { validateProps } from "../base/validator";
import { TOOLTIP_CSS } from "./style";
let exportTooltip;
(() => {
    exportTooltip = window.customElements.get("kuc-tooltip-1-17-0");
    if (exportTooltip) {
        return;
    }
    class KucTooltip extends KucBase {
        constructor(props) {
            super();
            this.className = "";
            this.id = "";
            this.placement = "top";
            this.title = "";
            this.container = "";
            this.describeChild = false;
            this._container = "";
            this._GUID = generateGUID();
            const validProps = validateProps(props);
            Object.assign(this, validProps);
            this._globalEscapeBound = this._globalEscape.bind(this);
        }
        update(changedProperties) {
            if (changedProperties.has("container")) {
                this._container = unsafeHTMLConverter(this.container);
            }
            super.update(changedProperties);
        }
        render() {
            return html `
        <div
          class="kuc-tooltip-1-17-0__group kuc-tooltip-1-17-0__group--${this._getPlacement()}"
        >
          <div
            class="kuc-tooltip-1-17-0__group__container"
            @focusin="${this._handleFocusinContainer}"
            @focusout="${this._handleFocusoutContainer}"
            @mouseenter="${this._handleMouseEnterContainer}"
            @mouseleave="${this._handleMouseLeaveContainer}"
            @touchstart="${this._handleTouchStartContainer}"
          >
            ${this._container}
          </div>
          ${this._getTitleTemplate()}
        </div>
      `;
        }
        updated() {
            this._initializeFirstChildElement();
            if (this.describeChild) {
                this._setChildTitleAttribute();
            }
            else {
                this._setChildAriaLabelAttribute();
            }
        }
        _handleMouseEnterContainer() {
            this._openTooltip();
        }
        _handleTouchStartContainer() {
            this._openTooltip();
        }
        _handleMouseLeaveContainer(event) {
            const relatedTargetEl = event.relatedTarget;
            const isHoverTitle = this._titleWrapper && this._titleWrapper.contains(relatedTargetEl);
            if (isHoverTitle)
                return;
            this._closeTooltip();
        }
        _initializeFirstChildElement() {
            if (typeof this._container !== "string") {
                const firstChildElement = this._groupContainerEL
                    .firstElementChild;
                if (firstChildElement &&
                    !firstChildElement.getAttribute("aria-describedby")) {
                    this._firstChildEl = firstChildElement;
                }
            }
        }
        _setChildTitleAttribute() {
            if (!this._firstChildEl)
                return;
            this._firstChildEl.setAttribute("title", this.title);
            this._firstChildEl.removeAttribute("aria-label");
        }
        _setChildAriaLabelAttribute() {
            if (!this._firstChildEl)
                return;
            this._firstChildEl.setAttribute("aria-label", this.title);
            this._firstChildEl.removeAttribute("title");
        }
        _getTitleTemplate() {
            if (!this.title)
                return html ``;
            return html `
        <div
          id="${this._GUID}-title"
          class="kuc-tooltip-1-17-0__group__title kuc-tooltip-1-17-0__group__title--hidden"
          role="tooltip"
          @mouseleave="${this._handleMouseLeaveTitle}"
        >
          <div class="kuc-tooltip-1-17-0__group__title__wrapper">
            <div class="kuc-tooltip-1-17-0__group__title__wrapper__arrow"></div>
            <div class="kuc-tooltip-1-17-0__group__title__wrapper__text">
              ${this.title}
            </div>
          </div>
        </div>
      `;
        }
        _handleMouseLeaveTitle(event) {
            const relatedTargetEl = event.relatedTarget;
            if (this._groupContainerEL.contains(relatedTargetEl))
                return;
            this._closeTooltip();
        }
        _handleFocusinContainer() {
            this._openTooltip();
        }
        _handleFocusoutContainer() {
            this._closeTooltip();
        }
        _openTooltip() {
            this._updateChildElementAttributes(true);
            this._showTooltip();
            this._attachGlobalListener();
        }
        _closeTooltip() {
            this._updateChildElementAttributes(false);
            this._hideTooltip();
            this._removeGlobalListener();
        }
        _updateChildElementAttributes(open) {
            if (!this._firstChildEl || !this.describeChild)
                return;
            if (open) {
                this._firstChildEl.removeAttribute("title");
                this._firstChildEl.setAttribute("aria-describedby", `${this._GUID}-title`);
                return;
            }
            this._firstChildEl.removeAttribute("aria-describedby");
            this._firstChildEl.setAttribute("title", this.title);
        }
        _showTooltip() {
            if (this._tooltips.length === 0)
                return;
            this._tooltips.forEach((tooltip) => {
                if (tooltip.id === `${this._GUID}-title`) {
                    tooltip.classList.remove("kuc-tooltip-1-17-0__group__title--hidden");
                }
            });
        }
        _hideTooltip() {
            if (this._tooltips.length === 0)
                return;
            this._tooltips.forEach((tooltip) => {
                if (tooltip.id === `${this._GUID}-title`) {
                    tooltip.classList.add("kuc-tooltip-1-17-0__group__title--hidden");
                }
            });
        }
        _attachGlobalListener() {
            document.addEventListener("keydown", this._globalEscapeBound);
        }
        _removeGlobalListener() {
            document.removeEventListener("keydown", this._globalEscapeBound);
        }
        _globalEscape(event) {
            if (event.key === "Escape" || event.key === "Esc") {
                this._closeTooltip();
            }
        }
        _getPlacement() {
            const placement = ["top", "bottom", "left", "right"];
            const isOfTypePlacement = placement.includes(this.placement);
            return isOfTypePlacement ? this.placement : "top";
        }
    }
    __decorate([
        property({ type: String, reflect: true, attribute: "class" })
    ], KucTooltip.prototype, "className", void 0);
    __decorate([
        property({ type: String, reflect: true, attribute: "id" })
    ], KucTooltip.prototype, "id", void 0);
    __decorate([
        property({ type: String })
    ], KucTooltip.prototype, "placement", void 0);
    __decorate([
        property({ type: String })
    ], KucTooltip.prototype, "title", void 0);
    __decorate([
        property()
    ], KucTooltip.prototype, "container", void 0);
    __decorate([
        property({ type: Boolean })
    ], KucTooltip.prototype, "describeChild", void 0);
    __decorate([
        query(".kuc-tooltip-1-17-0__group__container")
    ], KucTooltip.prototype, "_groupContainerEL", void 0);
    __decorate([
        query(".kuc-tooltip-1-17-0__group__title__wrapper")
    ], KucTooltip.prototype, "_titleWrapper", void 0);
    __decorate([
        queryAll(".kuc-tooltip-1-17-0__group__title")
    ], KucTooltip.prototype, "_tooltips", void 0);
    window.customElements.define("kuc-tooltip-1-17-0", KucTooltip);
    createStyleOnHeader(TOOLTIP_CSS);
    exportTooltip = KucTooltip;
})();
const Tooltip = exportTooltip;
export { Tooltip };
