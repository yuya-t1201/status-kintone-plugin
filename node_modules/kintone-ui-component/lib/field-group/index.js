var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html } from "lit";
import { property, query } from "lit/decorators.js";
import { unsafeHTMLConverter, visiblePropConverter } from "../base/converter";
import { createStyleOnHeader, dispatchCustomEvent, generateGUID, KucBase, } from "../base/kuc-base";
import { validateProps } from "../base/validator";
import { FIELD_GROUP_CSS } from "./style";
import "../base/label";
const DEFAULT_BODY_WIDTH = 517;
let exportFieldGroup;
(() => {
    exportFieldGroup = window.customElements.get("kuc-field-group-1-17-0");
    if (exportFieldGroup) {
        return;
    }
    class KucFieldGroup extends KucBase {
        constructor(props) {
            super();
            this.className = "";
            this.content = "";
            this.id = "";
            this.label = "";
            this.disabled = false;
            this.expanded = false;
            this.visible = true;
            this._content = "";
            this._GUID = generateGUID();
            const validProps = validateProps(props);
            Object.assign(this, validProps);
        }
        update(changedProperties) {
            if (changedProperties.has("content")) {
                this._content = unsafeHTMLConverter(this.content);
            }
            super.update(changedProperties);
        }
        render() {
            return html `
        <div
          class="kuc-field-group-1-17-0__group"
          role="group"
          aria-labelledby="${this._GUID}-control"
        >
          <button
            type="button"
            id="${this._GUID}-control"
            class="kuc-field-group-1-17-0__group__toggle"
            aria-controls="${this._GUID}-body"
            aria-expanded="${this.expanded && !this.disabled}"
            ?disabled="${this.disabled}"
            @click="${this._handleClickButton}"
            @keydown="${this._handleKeyDownButton}"
          >
            ${this._getSvgTemplate()}
            <kuc-base-label-1-17-0
              .text="${this.label}"
              .requiredIcon="${false}"
            ></kuc-base-label-1-17-0>
          </button>
          <div
            id="${this._GUID}-body"
            class="kuc-field-group-1-17-0__group__body"
            ?hidden="${!this.expanded || this.disabled}"
            @change="${this._handleChangeBody}"
          >
            ${this._content}
          </div>
        </div>
      `;
        }
        updated(changedProperties) {
            if (changedProperties.has("content")) {
                this._groupEl.style.minWidth = DEFAULT_BODY_WIDTH + "px";
                requestAnimationFrame(() => {
                    this._updateContainerWidth();
                });
            }
        }
        _updateContainerWidth() {
            if (!this._bodyEl)
                return;
            const isBodyHidden = this._bodyEl.hasAttribute("hidden");
            if (isBodyHidden) {
                this._bodyEl.removeAttribute("hidden");
            }
            const bodyWidth = this._bodyEl.offsetWidth;
            if (isBodyHidden) {
                this._bodyEl.setAttribute("hidden", "");
            }
            if (bodyWidth <= DEFAULT_BODY_WIDTH)
                return;
            this._groupEl.style.minWidth = bodyWidth + "px";
        }
        _getSvgTemplate() {
            return this.expanded
                ? html `<svg
            width="13"
            height="8"
            viewBox="0 0 13 8"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              fill-rule="evenodd"
              clip-rule="evenodd"
              d="M11.7122 0.5L12.5 1.03608L7.23318 7.11548L5.76682 7.11548L0.5 1.03608L1.2878 0.5L6.26504 6.19318L6.73496 6.19318L11.7122 0.5Z"
              fill="#939393"
            />
          </svg>`
                : html `<svg
            width="8"
            height="13"
            viewBox="0 0 8 13"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              fill-rule="evenodd"
              clip-rule="evenodd"
              d="M0.5 1.2878L1.03608 0.5L7.11548 5.76682V7.23318L1.03608 12.5L0.5 11.7122L6.19318 6.73496V6.26504L0.5 1.2878Z"
              fill="#939393"
            />
          </svg> `;
        }
        _handleChangeBody(event) {
            event.stopPropagation();
        }
        _handleKeyDownButton(event) {
            if (event.key === "Tab")
                return;
            event.preventDefault();
            if (event.key === "Enter" || event.key === " ") {
                this._handleClickButton(event);
            }
        }
        _handleClickButton(event) {
            if (event.target !== document.activeElement) {
                this._toggle.focus();
            }
            if (this.expanded) {
                const width = this._bodyEl.getBoundingClientRect().width;
                if (width > DEFAULT_BODY_WIDTH) {
                    this._groupEl.style.minWidth = width + "px";
                }
            }
            else {
                this._groupEl.style.minWidth = DEFAULT_BODY_WIDTH + "px";
            }
            this.expanded = !this.expanded;
            const eventDetail = {
                expanded: this.expanded,
            };
            dispatchCustomEvent(this, "change", eventDetail);
        }
    }
    __decorate([
        property({ type: String, reflect: true, attribute: "class" })
    ], KucFieldGroup.prototype, "className", void 0);
    __decorate([
        property()
    ], KucFieldGroup.prototype, "content", void 0);
    __decorate([
        property({ type: String, reflect: true, attribute: "id" })
    ], KucFieldGroup.prototype, "id", void 0);
    __decorate([
        property({ type: String })
    ], KucFieldGroup.prototype, "label", void 0);
    __decorate([
        property({ type: Boolean })
    ], KucFieldGroup.prototype, "disabled", void 0);
    __decorate([
        property({ type: Boolean })
    ], KucFieldGroup.prototype, "expanded", void 0);
    __decorate([
        property({
            type: Boolean,
            attribute: "hidden",
            reflect: true,
            converter: visiblePropConverter,
        })
    ], KucFieldGroup.prototype, "visible", void 0);
    __decorate([
        query(".kuc-field-group-1-17-0__group")
    ], KucFieldGroup.prototype, "_groupEl", void 0);
    __decorate([
        query(".kuc-field-group-1-17-0__group__body")
    ], KucFieldGroup.prototype, "_bodyEl", void 0);
    __decorate([
        query(".kuc-field-group-1-17-0__group__toggle")
    ], KucFieldGroup.prototype, "_toggle", void 0);
    window.customElements.define("kuc-field-group-1-17-0", KucFieldGroup);
    createStyleOnHeader(FIELD_GROUP_CSS);
    exportFieldGroup = KucFieldGroup;
})();
const FieldGroup = exportFieldGroup;
export { FieldGroup };
