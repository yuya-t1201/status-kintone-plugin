var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { html } from "lit";
import { property, queryAll, state } from "lit/decorators.js";
import { ERROR_MESSAGE } from "../base/constant";
import { unsafeHTMLConverter, visiblePropConverter } from "../base/converter";
import { createStyleOnHeader, dispatchCustomEvent, generateGUID, KucBase, } from "../base/kuc-base";
import { validateArrayType, validateDuplicatedValues, validateProps, validateValueString, } from "../base/validator";
import { TABS_CSS } from "./style";
let exportTabs;
(() => {
    exportTabs = window.customElements.get("kuc-tabs-1-17-0");
    if (exportTabs) {
        return;
    }
    class KucTabs extends KucBase {
        constructor(props) {
            super();
            this.className = "";
            this.id = "";
            this.value = "";
            this.borderVisible = true;
            this.visible = true;
            this.items = [];
            this._selectedValue = "";
            this._isClick = false;
            this._GUID = generateGUID();
            const validProps = validateProps(props);
            Object.assign(this, validProps);
        }
        shouldUpdate(changedProperties) {
            if (changedProperties.has("items")) {
                if (!validateArrayType(this.items)) {
                    this.throwErrorAfterUpdateComplete(ERROR_MESSAGE.ITEMS.IS_NOT_ARRAY);
                    return false;
                }
                for (let index = 0; index < this.items.length; index++) {
                    const itemValue = this.items[index].value;
                    if (itemValue === undefined) {
                        this.throwErrorAfterUpdateComplete(ERROR_MESSAGE.ITEMS.IS_NOT_SPECIFIED);
                        return false;
                    }
                }
                const valueArray = this.items.map((item) => item.value);
                if (!validateDuplicatedValues(valueArray)) {
                    this.throwErrorAfterUpdateComplete(ERROR_MESSAGE.ITEMS.IS_DUPLICATED);
                    return false;
                }
            }
            if (changedProperties.has("value") && !validateValueString(this.value)) {
                this.throwErrorAfterUpdateComplete(ERROR_MESSAGE.VALUE.IS_NOT_STRING);
                return false;
            }
            return true;
        }
        willUpdate(changedProperties) {
            let tabIndex = this._getMatchedTabIndex();
            if (tabIndex === -1) {
                tabIndex = this._getFirstVisibleTabIndex();
            }
            tabIndex > -1 && (this._selectedValue = this.items[tabIndex].value);
        }
        render() {
            return html `
        <div class="kuc-tabs-1-17-0__group">
          <ul
            class="kuc-tabs-1-17-0__group__tab-list"
            role="tablist"
            @blur="${this._handleBlur}"
          >
            ${this.items.map((item, index) => this._getTabTemplate(item, index))}
          </ul>
          <div
            class="kuc-tabs-1-17-0__group__tab-panel"
            ?border-visible="${this.borderVisible}"
          >
            ${this.items.map((item, index) => this._getTabContentTemplate(item, index))}
          </div>
        </div>
      `;
        }
        _getTabTemplate(item, index) {
            const isSelected = item.value === this._selectedValue;
            return html `<li
        role="presentation"
        class="kuc-tabs-1-17-0__group__tab-list__tab"
      >
        <button
          role="tab"
          ?hidden="${item.visible === false}"
          aria-selected="${isSelected}"
          tabindex="${isSelected && !item.disabled ? "0" : "-1"}"
          class="kuc-tabs-1-17-0__group__tab-list__tab__button ${this._isClick
                ? "kuc-tabs-1-17-0__group__tab-list__tab__button--click"
                : ""}"
          id="${this._GUID}-button-${index}"
          aria-controls="${this._GUID}-tabpanel-${index}"
          value="${item.value}"
          @click="${this._handleClickTab}"
          @mousedown="${this._handleMouseDown}"
          @keydown="${this._handleKeyDownTab}"
          ?disabled="${item.disabled}"
        >
          ${item.label ? item.label : ""}
        </button>
      </li>`;
        }
        _getTabContentTemplate(item, index) {
            const isSelected = item.value === this._selectedValue;
            return html `<div
        class="kuc-tabs-1-17-0__group__tab-panel__content"
        role="tabpanel"
        id="${this._GUID}-tabpanel-${index}"
        aria-labelledby="${this._GUID}-button-${index}"
        ?hidden="${!isSelected || item.visible === false}"
        @change="${this._handleChangeEvent}"
      >
        ${item.content ? unsafeHTMLConverter(item.content) : ""}
      </div>`;
        }
        _handleMouseDown(event) {
            this._isClick = true;
        }
        _handleClickTab(event) {
            const tabEl = event.target;
            tabEl.blur();
            const currentIndex = this._getCurrentTabIndex(tabEl.getAttribute("value"));
            this._tabButtons[currentIndex].focus();
            if (this.value === tabEl.value)
                return;
            const eventDetail = this._generateEventDetail(tabEl.value);
            dispatchCustomEvent(this, "change", eventDetail);
        }
        _handleChangeEvent(event) {
            event.stopPropagation();
        }
        _handleBlur(event) {
            this._isClick = false;
        }
        _handleKeyDownTab(event) {
            this._isClick = false;
            let doPreventEvent = false;
            switch (event.key) {
                case "Left":
                case "ArrowLeft": {
                    doPreventEvent = true;
                    this._moveToAdjacentTab(event.target, "prev");
                    break;
                }
                case "Right":
                case "ArrowRight": {
                    doPreventEvent = true;
                    this._moveToAdjacentTab(event.target, "next");
                    break;
                }
                case "Home": {
                    doPreventEvent = true;
                    this._moveToLastFirstTab(event.target, "first");
                    break;
                }
                case "End": {
                    doPreventEvent = true;
                    this._moveToLastFirstTab(event.target, "last");
                    break;
                }
            }
            if (doPreventEvent) {
                event.stopPropagation();
                event.preventDefault();
            }
        }
        _getCurrentTabIndex(currentValue) {
            let currentIndex = -1;
            for (let index = 0; index < this.items.length; index++) {
                if (this.items[index].value === currentValue) {
                    currentIndex = index;
                    break;
                }
            }
            if (currentIndex === -1) {
                currentIndex = this._getFirstVisibleTabIndex();
            }
            return currentIndex;
        }
        _getFirstVisibleTabIndex() {
            return this.items.findIndex((item) => item.visible !== false);
        }
        _getMatchedTabIndex() {
            return this.items.findIndex((item) => item.visible !== false && item.value === this.value);
        }
        _moveToLastFirstTab(triggerEl, direction) {
            const currentIndex = this._getCurrentTabIndex(triggerEl.getAttribute("value"));
            const increment = direction === "last" ? -1 : 1;
            let index = direction === "last" ? this.items.length - 1 : 0;
            while (index !== currentIndex) {
                if (this.items[index].visible !== false &&
                    this.items[index].disabled !== true) {
                    triggerEl.blur();
                    dispatchCustomEvent(this, "change", this._generateEventDetail(this._tabButtons[index].getAttribute("value")));
                    this._tabButtons[this._getCurrentTabIndex(this.value)].focus();
                    break;
                }
                index += increment;
            }
        }
        _moveToAdjacentTab(triggerEl, direction) {
            const currentIndex = this._getCurrentTabIndex(triggerEl.getAttribute("value"));
            const increment = direction === "next" ? 1 : -1;
            let index = currentIndex + increment;
            while (index !== currentIndex) {
                if (index === this.items.length) {
                    index = 0;
                }
                else if (index === -1) {
                    index = this.items.length - 1;
                }
                if (index === currentIndex) {
                    break;
                }
                if (this.items[index].visible !== false &&
                    this.items[index].disabled !== true) {
                    triggerEl.blur();
                    dispatchCustomEvent(this, "change", this._generateEventDetail(this._tabButtons[index].getAttribute("value")));
                    this._tabButtons[this._getCurrentTabIndex(this.value)].focus();
                    break;
                }
                index += increment;
            }
        }
        _generateEventDetail(newValue) {
            const oldValue = this.value;
            this.value = newValue;
            const eventDetail = {
                oldValue,
                value: newValue,
            };
            return eventDetail;
        }
    }
    __decorate([
        property({ type: String, reflect: true, attribute: "class" })
    ], KucTabs.prototype, "className", void 0);
    __decorate([
        property({ type: String, reflect: true, attribute: "id" })
    ], KucTabs.prototype, "id", void 0);
    __decorate([
        property({ type: String })
    ], KucTabs.prototype, "value", void 0);
    __decorate([
        property({ type: Boolean })
    ], KucTabs.prototype, "borderVisible", void 0);
    __decorate([
        property({
            type: Boolean,
            attribute: "hidden",
            reflect: true,
            converter: visiblePropConverter,
        })
    ], KucTabs.prototype, "visible", void 0);
    __decorate([
        property({ type: Array })
    ], KucTabs.prototype, "items", void 0);
    __decorate([
        queryAll(".kuc-tabs-1-17-0__group__tab-list__tab__button")
    ], KucTabs.prototype, "_tabButtons", void 0);
    __decorate([
        state()
    ], KucTabs.prototype, "_isClick", void 0);
    window.customElements.define("kuc-tabs-1-17-0", KucTabs);
    createStyleOnHeader(TABS_CSS);
    exportTabs = KucTabs;
})();
const Tabs = exportTabs;
export { Tabs };
