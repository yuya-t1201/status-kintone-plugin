"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ajv_1 = __importDefault(require("ajv"));
const bytes_1 = __importDefault(require("bytes"));
const manifest_schema_json_1 = __importDefault(require("../manifest-schema.json"));
const validate_https_url_1 = __importDefault(require("./validate-https-url"));
/**
 * @param {Object} json
 * @param {Object=} options
 * @return {{valid: boolean, errors: Array<!Object>}} errors is null if valid
 */
exports.default = (json, options = {}) => {
    let relativePath = () => true;
    let maxFileSize;
    let fileExists;
    if (typeof options.relativePath === "function") {
        relativePath = options.relativePath;
    }
    if (typeof options.maxFileSize === "function") {
        maxFileSize = options.maxFileSize;
    }
    if (typeof options.fileExists === "function") {
        fileExists = options.fileExists;
    }
    const ajv = new ajv_1.default({
        allErrors: true,
        formats: {
            "http-url": (str) => (0, validate_https_url_1.default)(str, true),
            "https-url": (str) => (0, validate_https_url_1.default)(str),
            "relative-path": relativePath,
        },
    });
    const validateMaxFileSize = (schema, filePath) => {
        var _a;
        // schema: max file size like "512KB" or 123 (in bytes)
        // data: path to the file
        if (maxFileSize === undefined) {
            return true;
        }
        const maxBytes = bytes_1.default.parse(schema);
        const result = maxFileSize(maxBytes, filePath);
        const defaultMessage = `file size should be <= ${schema}`;
        if (result === false) {
            validateMaxFileSize.errors = [
                {
                    keyword: "maxFileSize",
                    params: {
                        limit: maxBytes,
                    },
                    message: defaultMessage,
                },
            ];
            return false;
        }
        if (typeof result === "object" && !result.valid) {
            validateMaxFileSize.errors = [
                {
                    keyword: "maxFileSize",
                    params: {
                        limit: maxBytes,
                    },
                    message: (_a = result.message) !== null && _a !== void 0 ? _a : defaultMessage,
                },
            ];
            return false;
        }
        return true;
    };
    const validateFileExists = (schema, filePath) => {
        var _a;
        if (fileExists === undefined || !schema) {
            return true;
        }
        const result = fileExists(filePath);
        const defaultMessage = `file should exist ("${filePath}")`;
        if (result === false) {
            validateFileExists.errors = [
                {
                    keyword: "fileExists",
                    message: defaultMessage,
                },
            ];
            return false;
        }
        if (typeof result === "object" && !result.valid) {
            validateFileExists.errors = [
                {
                    keyword: "fileExists",
                    message: (_a = result.message) !== null && _a !== void 0 ? _a : defaultMessage,
                },
            ];
            return false;
        }
        return true;
    };
    ajv.addKeyword({
        keyword: "maxFileSize",
        validate: validateMaxFileSize,
    });
    ajv.addKeyword({
        keyword: "fileExists",
        validate: validateFileExists,
    });
    const validate = ajv.compile(manifest_schema_json_1.default);
    const valid = validate(json);
    return { valid, errors: transformErrors(validate.errors) };
};
/**
 * @param {undefined|null|Array<Object>} errors
 * @return {null|Array<Object>} shallow copy of the input or null
 */
const transformErrors = (errors) => {
    if (!errors) {
        return null;
    }
    // shallow copy
    return errors.slice();
};
//# sourceMappingURL=index.js.map